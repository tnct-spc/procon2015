#define BOOST_TEST_MAIN
#include <boost/test/included/unit_test.hpp>

#include <iostream>

// こうするとプライベートメンバ関数のテストができるぞい
#define private public
#include "data_type.hpp"

template <typename CharT, typename Traits, typename T>
std::basic_ostream<CharT, Traits> &
operator<< (std::basic_ostream<CharT, Traits> & os, T const & container)
{
    for (auto && element : container) {
        os << element << std::endl;
    }
    return os;
}

namespace boost::test_tools {
    template <>
    struct print_log_value<std::vector<std::string>> {
        template <typename CharT, typename Traits>
        void operator()(std::basic_ostream<CharT, Traits> & os, std::vector<std::string> const& container)
        {
            ::operator<<(os, container);
        }
    };
}

namespace {
    BOOST_AUTO_TEST_SUITE(problem_type_tests)

        auto problem_text = "\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
01000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000100000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000010000001111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
\r\n\
4\r\n\
01000000\r\n\
01000000\r\n\
01000000\r\n\
01000000\r\n\
01000000\r\n\
01000000\r\n\
01110000\r\n\
00000000\r\n\
\r\n\
00000000\r\n\
01100000\r\n\
01100000\r\n\
01100000\r\n\
01100000\r\n\
00000000\r\n\
00000000\r\n\
00000000\r\n\
\r\n\
00000000\r\n\
00010000\r\n\
00010000\r\n\
01111000\r\n\
00000000\r\n\
00000000\r\n\
00000000\r\n\
00000000\r\n\
\r\n\
10000000\r\n\
11000000\r\n\
01100000\r\n\
00110000\r\n\
00011000\r\n\
00001100\r\n\
00000110\r\n\
00000011";

    BOOST_AUTO_TEST_CASE(_split_problem_text_test)
    {
        auto expected = "\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
01000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000100000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000000000001111111111111111\r\n\
00000000010000001111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111\r\n\
11111111111111111111111111111111";
        auto result = std::get<0>(problem_type::_split_problem_text(problem_text));
        BOOST_CHECK_EQUAL(expected, result);
    }

    BOOST_AUTO_TEST_CASE(constructor_test)
    {
        BOOST_CHECK_NO_THROW(problem_type(problem_text));
    }

    BOOST_AUTO_TEST_CASE(_split_test)
    {
        auto sample = "123,,456,,789,,12,34,56,78,90,,abc,,def,,ghi,,,,,"s;
        std::vector<std::string> result = problem_type::_split(sample, ",,"s);
        decltype(result) expected = {"123"s,"456"s,"789"s, "12,34,56,78,90"s, "abc"s, "def"s, "ghi"s, ""s, ","s};
        BOOST_CHECK_EQUAL(expected, result);
    }

    BOOST_AUTO_TEST_SUITE_END()
}
